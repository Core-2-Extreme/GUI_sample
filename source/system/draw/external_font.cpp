#include "system/headers.hpp"

bool util_exfont_loaded_external_font[DEF_EXFONT_NUM_OF_FONT_NAME];
bool util_exfont_request_external_font_state[DEF_EXFONT_NUM_OF_FONT_NAME];
bool util_exfont_loaded_system_font[4] = { false, false, false, false, };
bool util_exfont_request_system_font_state[4] = { false, false, false, false, };
bool util_exfont_thread_run = false;
bool util_exfont_load_external_font_request = false;
bool util_exfont_unload_external_font_request = false;
bool util_exfont_load_system_font_request = false;
bool util_exfont_unload_system_font_request = false;
bool util_exfont_init = false;
int util_exfont_texture_num[DEF_EXFONT_NUM_OF_FONT_NAME];
double util_exfont_font_interval[10240] =
{
  //#0000~#007F (128) Basic latin
  20,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
   6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
   6,  4,  6, 10, 10, 14, 11,  4,  6,  6,  7, 10,  4,  6,  4,  6,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  4,  4, 10, 10, 10, 10,
  16, 12, 10, 12, 11, 10,  9, 12, 10,  4,  8, 11,  9, 12, 10, 12,
  10, 12, 11, 10, 10, 10, 12, 16, 10, 12, 10,  5,  6,  5,  8, 10,
   5,  9,  9,  9,  9, 10,  6,  9,  8,  4,  5,  8,  4, 12,  8, 10,
   9,  9,  7,  8,  6,  8,  8, 12,  8,  9,  9,  6,  4,  6, 10,  6,
  //#0080~#00FF ( 96) Latin-1 Supplement
   2,  4, 10, 10, 10, 10,  4, 10,  6, 14,  8,  9, 10,  6, 14, 10,
   6, 10,  8,  8,  5,  8, 10,  4,  6,  5,  8,  9, 14, 14, 14, 10,
  12, 12, 12, 12, 12, 12, 17, 12, 10, 10, 10, 10,  5,  5,  7,  6,
  13, 10, 12, 12, 12, 12, 12,  9, 13, 10, 10, 10, 10, 12, 11, 10,
  10, 10, 10, 10, 10, 10, 14,  9, 10, 10, 10, 10,  5,  5,  7,  6,
  10,  8, 10, 10, 10, 10, 10, 10, 10,  8,  8,  8,  8, 10,  9, 10,
  //#0100~#017F (128) Latin Extended-A
  12, 10, 12, 10, 13, 11, 12,  9, 12,  9, 12,  9, 12,  9, 11, 11,
  13, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 12,  9, 12,  9,
  12,  9, 12,  9, 10,  8, 14,  9,  8,  8,  7,  8,  7,  7,  6,  5,
   4,  4, 11,  8, 10,  8, 11,  9,  9,  9,  5,  9,  4, 11,  7,  9,
   6, 10,  6, 10,  8, 10,  8, 10,  8, 11, 11,  8, 12, 10, 12, 10,
  12, 10, 16, 16, 11,  7, 11,  7, 11,  7, 11,  9, 11,  9, 11,  9,
  11,  9, 10,  6, 10,  8, 10,  6, 10,  8, 10,  8, 10,  8, 10,  8,
  10,  8, 10, 10, 16, 14, 12, 10, 12, 11, 10, 11, 10, 11, 10,  6, 
  //#0180~#024F (208) Latin Extended-B
  11, 13, 10,  9,  9,  9, 12, 13, 10, 13, 13, 11,  9, 10, 10, 12,
  10, 11,  8, 13, 12, 13,  5,  7, 12,  9,  7, 10, 12, 12,  8, 12,
  13, 10, 16, 12, 13,  9, 12, 11,  9, 10,  8,  6, 11,  6, 10, 13,
  11, 12, 11, 13, 12, 11, 10, 10, 10, 10,  8, 10, 10, 10, 10,  9,
   4,  6, 10,  4, 21, 19, 17, 16, 12,  8, 17, 14, 12, 12, 10,  7,
   7, 12, 10, 10,  8, 10,  8, 10,  8, 10,  8, 10,  8, 10, 12, 10,
  12, 10, 17, 14, 13, 10, 12,  9, 11,  9, 12, 10, 12, 10, 10, 10,
   8, 21, 19, 17, 12,  9, 18, 11, 13, 11, 12, 10, 17, 14, 13, 10,
  12, 10, 12, 10, 10, 10, 10, 10,  8,  8,  7,  6, 12, 10, 12, 10,
  11,  8, 11,  7, 10,  8, 10,  8,  9,  8, 11,  8, 10,  8, 12, 11,
  13, 12, 12,  9, 10,  8, 12,  8, 10,  8, 12, 10, 12, 10, 12, 10,
  12, 10, 12, 12,  8, 12,  8,  7, 14, 14, 12, 12,  8, 12, 11,  9,
   8, 10, 10, 11, 14, 12, 10,  8, 12,  9, 15, 13, 13, 10, 12, 12,
  //#0250~#02AF ( 96) IPA Extensions
  10,  9,  9,  9,  9,  9, 11, 11, 10, 10, 13,  8,  8, 12,  9,  7,
  11,  9, 10, 10, 10,  8,  8,  8,  6,  5,  6,  8,  8,  6, 10, 12,
  12, 12, 10, 10,  8, 10, 12, 12, 10,  7,  7,  9,  7,  7,  7,  7,
   9,  9,  9,  8,  8,  8,  9,  6,  7, 11, 10,  9, 10, 14, 10, 10,
  12, 10, 10, 10,  9,  8,  9,  9, 10,  9,  9, 11,  8,  8,  9,  7,
  11,  9,  8, 16, 16, 16, 12, 11, 12, 14, 12, 12, 12, 10, 12, 14,
  //#02B0~#02FF ( 80) Spacing Modifier Letters
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  //#0300~#036F (112) Combining Diacritical Marks
   6,  5,  7,  8,  8, 10,  6,  4,  6,  6,  6,  8,  7,  4,  6,  8,
   8,  6,  4,  4,  4,  4,  6,  5,  4,  4,  6,  5,  4,  6,  6,  6,
   6,  6,  6,  4,  6,  6,  4,  6,  6,  4,  6,  6,  7,  7,  6,  6,
   8,  8, 10, 10,  8,  8, 10,  8, 11,  4,  6,  6,  6,  6,  4, 10,
   6,  5,  8,  4,  8,  5,  9,  9,  6,  6,  8,  8,  8, 12,  6,  2,
   6,  4,  8,  6,  6,  6, 10,  4,  4,  7,  8,  5, 12, 12, 14, 14,
  11, 11, 16,  7,  7,  5,  8,  9,  7,  8,  9, 11,  8,  7,  8,  8,
  //#0370~#03FF (135) Greek and Coptic
  10, 12, 14, 14,  6,  6, 14, 14,          5,  8,  9,  8,  4,  8,
                   4,  8, 12,  4, 13, 13,  6,     13,     14, 13,
   8, 12, 10,  9, 12, 10, 11, 10, 12,  4, 11, 12, 12, 10, 10, 12,
  10, 11,     10, 10, 12, 12, 12, 12, 12,  6, 12, 10,  8,  8,  4,
   8, 10, 10, 10, 10,  8,  9,  8, 10,  4,  9, 10,  8, 10,  8, 10,
  12, 10,  9, 10,  8,  8, 11, 10, 12, 12,  6,  8, 10,  8, 12, 12,
  10, 11, 12, 13, 12, 10, 13, 10, 12, 10, 12, 11,  9, 10, 10,  8,
  12, 12, 13, 12, 11,  9, 10, 10, 10,  8, 12, 11, 11, 11, 10,  9,
  10, 10,  9,  6, 12,  8,  8, 10,  8, 11, 14, 12, 11, 11, 11, 11,
  //#0400~#04FF (256) Cyrillic
  10, 10, 14,  9, 12, 11,  4,  6,  9, 18, 16, 14, 10, 13, 12, 10,
  12, 10, 10,  9, 12, 10, 16, 10, 10, 10, 10, 11, 12, 10, 12, 10,
  11, 12, 10, 12, 12, 12, 12, 11, 14, 15, 13, 13, 10, 12, 15, 11,
  10, 10,  9,  7, 11, 10, 12,  8,  8,  8,  9,  9, 10,  8, 10,  8,
   9,  9,  9, 10, 14, 10,  9,  9, 12, 13, 11, 11,  9,  9, 12,  9,
   8, 10,  9,  7, 10,  9,  4,  6,  6, 15, 13,  9,  9, 10, 10,  8,
  16, 12, 11, 10, 15, 11, 12, 12, 15, 13, 12, 11, 15, 13, 10,  8,
  14, 12, 12, 10, 12, 10, 12, 10, 21, 17, 12, 10, 16, 12, 16, 12,
  12, 10, 11,  8,  8,  8,  8, 13, 14, 12, 14, 10, 12, 10, 12, 10,
   7,  7, 11,  8, 10,  8, 16, 12, 10,  8, 10,  9, 10,  9, 12, 10,
  14, 10, 12, 10, 15, 11, 12,  9, 12, 10, 12,  9, 10,  9, 12, 10,
  12, 10, 12, 10, 16, 12, 12, 10, 11,  9, 10,  8, 14, 12, 14, 12,
   4, 16, 12, 10,  9, 12, 10, 12, 10, 14, 10, 11,  9, 15, 11,  6,
  12, 10, 12, 10, 17, 14, 10, 10, 12, 10, 12, 10, 16, 12, 10,  8,
  10,  9, 10,  8, 10,  8, 12, 10, 12, 10, 12, 10, 11,  9, 12, 10,
  12, 10, 12, 10, 11,  9, 10,  8, 13, 11, 12,  8, 13, 11, 12, 10,
  //#0500~#052F ( 48) Cyrillic Supplement
  12,  9, 16, 12, 16, 12, 11, 10, 16, 12, 18, 14, 12, 10, 14, 10,
  10,  8, 12, 10, 16, 14, 14, 14, 16, 13, 12, 10, 16, 14, 12, 10,
  16, 13, 18, 14, 13, 11, 13, 11, 14, 12, 22, 19, 14, 12, 13, 11,
  //#0530~#058F ( 89) Armenian
      11, 10,  8,  8, 10,  8,  8, 11,  9,  7,  8, 10, 11, 12,  8,
   8, 10, 10,  9, 11, 10, 10, 10,  8,  8, 10,  8, 11,  8, 11,  8,
   8,  8,  9, 10, 12, 10, 12,          4,  4,  4,  6,  4,  6,  8,
      10,  8,  8,  8,  8,  8,  8,  7,  7,  8,  8,  6,  8,  8,  8,
   8,  8,  8,  8,  9,  5,  7,  6,  8,  6, 10,  8,  8,  8,  8, 10,
   8,  8,  6, 10,  6,  6,  9,  9,      4,  8,         12, 12, 10,
  //#0590~#05FF ( 88) Hebrew
       5,  7,  4,  4,  5,  5,  4,  6,  5,  5,  5,  5,  5,  6,  8,
   5,  6,  7,  5,  4,  5,  6,  4,  5,  5,  5,  4,  5,  5,  6,  4,
   4,  6,  6,  6,  4,  6,  6,  4,  4,  4,  3,  6,  4,  4,  8,  4,
   4,  4,  4,  4,  4,  5,  8,  7,
  10, 10,  8, 10, 10,  7,  6, 10, 10,  7,  9,  9,  8, 10, 10,  7,
   6, 10, 10,  9, 10,  8,  9, 10,  9, 11, 11,                 10,
  10, 10, 10,  5,  8,
  //#0600~#06FF (255) Arabic
  14, 20, 10, 20, 20, 18, 11, 11, 12, 12, 14,  7,  4,  6, 11,  9,
   6,  5,  6,  7,  7,  6,  7,  5,  5,  4,  5,  4, 18,      6,  9,
  11, 10,  6,  4, 10,  4, 12,  4, 12,  8, 12, 12,  9,  9,  9,  7,
   7,  8,  8, 18, 18, 20, 20, 14, 14, 10, 10, 14, 14, 11, 11, 11,
   7, 14, 13, 12, 11, 10, 12,  8, 10, 12, 12,  6,  6,  6,  6,  6,
   6,  7,  5,  6,  5,  5,  4,  7,  4,  4,  5,  4,  4,  5,  4,  5,
   5,  5,  8,  8,  8,  8,  8,  8,  8,  8,  8,  5,  4,  8, 12, 10,
   4,  6,  5,  5,  5,  7, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12,
  12,  9,  9,  9,  9,  9,  9,  9,  7,  7,  7,  7,  7,  7,  7,  7,
   7,  9,  9,  8,  8, 10,  9,  9,  8,  8, 18, 18, 18, 20, 12, 20,
  10, 14, 14, 14, 14, 14, 14, 13, 13, 14, 16, 14, 12, 12, 12, 14,
  14, 14, 14, 14, 14, 11, 11, 12,  8, 10, 12, 12, 12, 12, 12,  8,
   8,  8,  8,  8, 10, 10, 10, 10, 10, 10, 10, 10, 12, 14, 12,  8,
  12, 12, 11, 11,  6,  8, 11, 10,  7,  7,  7,  7, 11, 12, 14,  4,
   4,  7,  7, 11,  5,  7,  8,  8,  8,  8,  5,  5,  5,  7,  7,  9,
   5,  5,  8,  8,  8,  8,  6,  8,  8,  8, 16, 16,  8,  6,  6,  9,
  //#0900~#097F (128) Devanagari
   9, 10,  9, 12, 12, 13, 16, 10, 10, 12, 14, 16, 12, 12, 12, 12,
  12, 16, 16, 16, 16, 12, 14, 12, 12, 12, 13, 14, 13, 14, 13, 10,
  10, 12, 10, 13, 12, 11, 10, 11, 12, 12, 12, 13, 12, 13, 12, 12,
  10, 10, 12, 14, 14, 12, 12, 12, 12, 10,  4,  6,  9,  8, 14, 15,
  15, 10, 12, 10, 10, 10,  9,  9,  9, 15, 15, 15, 15, 11,  6, 10,
  14,  9, 12,  9,  9,  9,  9,  9, 12, 14, 12, 13, 12, 10, 13, 12,
  16, 12, 11, 12,  4,  6,  8,  6, 10,  8, 12, 10,  9, 10, 10,  9,
   6,  4, 12, 13, 16, 16, 13, 13, 18, 13, 11, 12, 15,  9, 13, 13,
  //#0A00~#0A7F ( 79) Gurmukhi
       9, 10,  6,     13, 16, 14, 14, 12, 12,                 11,
  13,         12, 13, 12, 12, 12, 13, 12, 12, 12, 12, 10, 11, 10,
  12, 12, 12, 12, 12, 12, 12, 12, 12,     12, 11, 11, 11, 11, 12,
  10,     12, 12,     12, 11,     11, 11,          9,     14, 14,
  14, 10, 10,                 10,  9,          9, 10, 12,
       8,                             12, 13, 12, 12,     12,
                          10,  9, 10, 10, 10,  9, 10, 10, 10, 10,
  12, 12, 11, 12, 14,  7,
  //#0B80~#0BFF ( 72) Tamil
           9, 12,     16, 18, 15, 11, 16, 20,             13, 13,
  14,     12, 12, 21, 11,             13, 10,     14,     16, 13,
              21, 11,             11, 17, 11,             12, 12,
  10, 13, 13, 15, 12, 14, 18, 17, 17, 21,                 17, 12,
  11, 17, 21,             19, 19, 21,     20, 20, 19,  9,
  13,                         21,
                          12, 11, 16, 12, 12, 15, 15, 13, 16, 13,
  12, 13, 14, 16, 16, 22, 12, 20, 22, 16, 14,
  //#0C00~#0C7F ( 96) Telugu
   9, 14, 17, 13,     12, 12, 10, 18, 12, 16, 20, 14,     10, 10,
  12,     10, 10, 16,  9, 11, 10, 15, 10, 11, 11, 10, 18, 12, 14,
  10, 12, 12, 12, 12, 11, 11, 11, 10,     10, 10, 11, 12, 15, 18,
  10, 14, 10, 10, 13, 10, 10, 14, 11, 16,             11, 19, 14,
  14, 14, 19, 15, 21,     19, 19, 21,     21, 21, 22, 18,
                      14, 14,     13, 12, 11,
  22, 20,  7, 10,         10, 12, 13,  9, 11, 14, 13, 10, 14, 13,
                                  10,  4,  8, 12, 13, 13, 13, 13,
  //#0C80~#0CFF ( 88) Kannada
  10,  9, 15, 12,     11, 12, 10, 14, 16, 20, 16, 12,     11, 11,
  11,     12, 12, 12,  8, 13,  9, 12, 12, 12, 12, 12, 18, 15, 11,
  10, 11, 11, 12, 10, 11, 11, 11, 10,     11, 11, 11, 11, 16, 18,
  10, 11, 12, 10,     10, 10, 10, 10, 12,          8,  8, 16, 15,
  18, 15, 19, 15, 18,     14, 19, 19,     22, 21, 16, 15,
                      14, 15,                             10,
  22, 16, 10, 10,         10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
      10, 18,
  //#0D80~#0DFF ( 90) Sinhala
          16, 16,     11, 15, 15, 15, 10, 11, 13, 18, 16, 21, 16,
  22, 12, 13, 20, 12, 12, 18,             14, 12, 12, 12, 12, 14,
  12, 12, 12, 20, 17, 15, 12, 12, 12, 12, 12, 18, 12, 13, 12,  8,
  12, 16,      8, 12, 12, 12, 13, 12, 12, 12, 11,     13,
  12, 12, 12, 12, 13, 13, 12,             14,                 16,
  17, 17, 14, 14, 14,     14,     16, 22, 22, 22, 21, 21, 21, 19,
                          11, 13, 16, 17, 13,  9, 15, 13, 11, 16,
          22, 18, 16,
  //#0E00~#0E7F ( 87) Thai
      10, 11, 11, 11, 11, 11,  8,  9, 12, 12, 12, 13, 14, 11, 11,
   9, 13, 13, 14, 11, 11, 10, 11,  9, 12, 10, 10, 10, 10, 11, 11,
  11, 10, 10,  8, 10,  9, 11,  9, 11, 12, 10, 11, 12,  9, 10,  9,
   8,  9,  9, 12,  9,  9, 10,  9,  4,  6,  4,                 10,
   5, 10,  9, 10, 10,  9,  9,  9,  4,  7,  9,  6,  7,  5,  5, 10,
  10, 11, 10, 10, 12, 12, 12, 13, 12, 12, 11, 16,
  //#0E80~#0EFF ( 67) Lao
      12, 12,     12,          9, 12,     11,         12,
                  12, 14, 12, 14,     12, 12, 12, 14, 14, 14, 14,
      12, 12, 12,     12,     12,         12, 14,     12, 12, 10,
   8,  8,  8,  9, 10, 11, 10, 11,  6,  6,     10, 10, 10,
   8, 14,  8,  8,  6,     10,      4, 10, 10,  6,  8,  6,
  12, 12, 10, 12, 11, 11, 14, 12, 12, 14,         20, 20, 10, 10,
  //#0F00~#0FFF (211) Tibetan
  13, 10, 12, 13, 15,  9, 15, 19,  8,  7, 14,  4,  4,  5,  7,  6,
   5,  6, 14, 14,  6, 12, 12, 19, 17, 16,  6,  8,  8,  6, 10,  9,
   8,  8, 10, 10, 10, 10,  9, 11,  9,  8, 10,  9, 10,  9, 10, 10,
  10, 10, 10, 10,  7, 16, 10, 16, 10, 12, 21, 21, 16, 15, 16, 16,
  11, 10, 11, 10, 10,  9, 10,  9,      8,  8,  8,  8,  9,  8,  8,
   9, 10, 10,  8,  9,  9,  9,  9, 10, 11, 11, 10, 11, 10, 10,  9,
  10, 10, 10, 10, 11,  9, 10,  9, 12, 11, 10, 18, 18,
      17, 11, 17, 16, 18, 17, 18, 17, 18, 10, 10, 13, 13, 10, 13,
  11, 17, 10, 10, 10,  8, 16, 16, 10, 10, 10, 10,  9, 10, 10, 10,
  17, 16, 17, 16, 16, 16, 16, 16,     16, 16, 16, 16, 16, 16, 16,
  16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 17, 17, 17, 16, 16, 16,
  16, 17, 16, 17, 17, 17, 16, 16, 19, 18, 17, 17, 16,     12, 12,
   9,  7, 10, 16, 10, 10, 21, 18, 12, 13, 14, 14, 14,     10, 10,
  21,  7, 18, 18, 18, 14, 14, 14, 14, 15, 15,
  //#10A0~#10FF ( 88) Georgian
  12, 12, 12, 12, 10, 13, 12, 13,  9, 10, 13, 12, 10, 12, 12, 11,
  12, 10, 10, 12, 12, 12, 10, 10, 10, 10, 10, 13, 10, 12, 10, 13,
  12, 10, 11, 10, 11, 14,      8,                     10,
   8, 10, 10, 14,  9, 10, 12, 14, 10, 10, 16,  9, 10, 12, 10,  9,
  12,  9, 14, 13, 12,  8, 12,  9,  9,  8, 10,  9, 10, 10,  9, 13,
  10, 11, 10, 10,  8, 10, 14,  8,  8, 10, 12,  7,  8, 10, 10, 10,
  //#1400~#167F (640) Unified Canadian Aboriginal Syllabics
   8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14,
  14, 14, 15, 14, 14, 14, 12, 15, 15, 15, 15, 12,  8,  8,  8,  5,
   5,  8,  8,  6,  8,  8,  5,  4,  6,  8,  8, 15, 12, 12, 15, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14,
  12, 14, 12, 14, 15, 12, 15, 12, 12,  8,  4,  6, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 12, 15, 12,
  15, 15, 12, 15, 12, 15,  8, 14, 14, 14, 14,  8,  8,  8,  8,  8,
   8,  8,  8,  8, 10, 10, 10, 10, 10, 10, 10,  8, 10, 10, 10, 10,
  10, 11, 10,  6,  6, 10, 10, 10, 10,  8,  8,  8,  8,  8,  8,  8,
   8,  8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10,  6,  6, 12, 12, 12, 12, 12, 13, 13, 12, 13, 12, 15, 15, 12,
  15, 12, 12, 15, 13, 14, 15, 12, 15, 13, 15,  8,  6,  8,  6,  8,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 15, 14, 15, 14, 15,
   8,  8,  8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 15, 15, 14,
  15, 14, 14, 15, 14, 15, 15, 14, 15, 14,  8,  8, 12,  8,  8,  8,
   8,  8,  8,  8,  8,  8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10,  6,  6,  6,  8,  6,  6,  6, 16, 16, 12, 12,
  11, 11, 11, 12, 12, 12, 12, 14, 11, 14, 14, 14, 14, 14, 14, 14,
  14, 14, 14, 14, 14,  8, 12, 12, 11, 12, 12, 11, 12, 11, 11, 13,
  14, 14, 13, 14, 13, 14, 14, 14, 14, 14, 13, 14, 13, 14,  8,  8,
   8,  8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14,
   7,  8, 12, 11, 11, 11, 11, 12, 12, 12, 12, 15, 15,  8, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 15, 14,  8, 12, 12, 12, 12,  7,
  12, 12, 12, 12, 10, 10, 10, 10, 10, 10, 10,  7, 10,  8, 12, 12,
  12, 12, 13, 12, 12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 14,
  14, 10, 10, 14, 14,  8, 14, 10, 10, 10, 10, 12, 12, 12, 12,  8,
  12, 12, 12, 12, 12, 12,  8, 14, 14, 14, 14, 14, 14, 14,  8, 10,
   9,  9,  9,  9, 12, 12, 12, 12, 10, 10, 10, 10, 12, 12, 12, 12,
  10, 10, 10, 10, 12, 12, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  8, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12,  8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 12, 12,
  12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 12, 12, 14, 14, 14, 14,
  12, 12, 12, 12, 12, 12,  8,  8, 12, 12, 12, 12, 12, 12, 13, 13,
  12, 12, 12, 12, 13, 13, 12, 12, 12, 12,  6, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  8, 13,
  16, 20, 20, 19, 19, 20, 20, 10, 10, 10, 10, 10, 10, 10,  6,  6,
  //#1D00~#1D7F (128) Phonetic Extensions
  10, 12, 12, 11,  9, 10, 10, 10,  8,  6,  9, 11, 10, 10, 11, 10,
   9, 10, 10, 14, 14,  8, 10, 10,  9, 10, 10,  9, 12, 10, 11, 10,
  10, 12,  8,  8,  8, 10,  8, 10, 10,  9, 12, 10, 10, 12, 10, 11,
  10, 10, 10, 10, 11,  6,  9, 11, 10, 10, 11, 11, 10,  8,  9, 10,
   9, 12, 12,  7,  7,  8, 10,  8,  8,  8,  8,  7,  7,  8,  6, 10,
  12,  8,  8,  8,  8,  8,  8,  8,  9,  8, 12,  8,  8,  8,  9,  8,
   8, 10,  6,  8,  9,  8,  8,  9,  8,  8, 10, 14, 11, 11, 10, 16,
  14, 11, 11,  9,  9,  9,  8, 10,  8,  9, 17,  8,  8, 12, 12, 12,
  //#1DC0~#1DFF ( 63) Combining Diacritical Marks Supplement
   7,  7,  7,  8, 10, 10, 10, 10, 10, 10,  8,  9,  9, 16,  6,  6,
   9,  8,  5,  7,  7,  7,  7,  5,  6,  6,  6,  6,  6,  5,  5,  7,
   6,  6,  6,  6,  5,  5,  5,  7,  7,  6,  5,  5,  5,  6,  6,  6,
   7,  7,  6,  6,  7,  5,  7,  7,  5, 16,      8, 16,  7,  6, 10,
  //#1F00~#1FFF (233) Greek Extended
  10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 13, 13, 13, 13, 14, 14,
   8,  8,  8,  8,  8,  8,         13, 13, 14, 14, 14, 14,
   8,  8,  8,  8,  8,  8,  8,  8, 13, 13, 14, 14, 15, 15, 16, 16,
   4,  4,  6,  6,  6,  6,  7,  7,  6,  6,  8,  8,  9,  9,  8,  8,
  10, 10, 10, 10, 10, 10,         13, 14, 15, 15, 15, 15,
   8,  8,  8,  8,  8,  8,  8,  8,     15,     16,     16,     17,
  12, 12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 15, 15, 15, 16, 16,
  10, 10,  8,  8,  8,  8,  4,  4, 10, 10,  8,  8, 12, 12,
  10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 13, 13, 13, 13, 14, 14,
   8,  8,  8,  8,  8,  8,  8,  8, 13, 13, 14, 14, 15, 15, 16, 16,
  12, 12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 15, 15, 15, 16, 16,
  10, 10, 10, 10, 10,     10, 10, 12, 12, 12, 12, 12,  4,  6,  4,
   7,  7,  8,  8,  8,      8,  8, 13, 13, 13, 13, 10,  6,  6,  7,
   6,  8,  8,  8,  7,          7,  7,  7,  6,  6,      6,  6,  7,
   8,  8,  8,  8, 10, 10,  8,  8, 12, 12, 14, 14, 13,  8,  8,  4,
          12, 12, 12,     12, 12, 13, 13, 13, 13, 12,  4,  4,
  //#2000~#206F (71) General Punctuation
   6,  6, 10, 10, 18, 10,  6, 10,  4,  4,  4,  4,  6,  6,  6,  6,
  10, 10,  6,  6,  4,  8, 14,  4,
  16, 20,  4,  6,  8,  4,  6,  8,  6,  5,  5, 14,  7, 10, 10, 16,
  16,  6, 13,  6, 10,  5,  5, 14, 12, 11,  9, 10, 10, 10,  8,  4,
  14,  8, 10, 10, 14, 10,  8, 13,  8,  8,  4, 10, 10,  4,  4,
  //#2070~#209F ( 42) Superscripts and Subscripts
   8,  6,          8,  8,  8,  6,  6,  8,  6,  6,  6,  6,  5,  6,
   8,  5,  8,  8,  8,  8,  8,  6,  6,  8,  6,  6,  6,  6,  5,
   7,  8,  8,  8,  8,  7,  7,  4, 10,  7,  8,  6,  6,
  //#20D0~#20FF ( 33) Combining Diacritical Marks for Symbols
  10, 10,  4,  4, 12, 12, 10, 10,  8,  8,  8,  8, 10, 14, 13, 16,
  14, 12, 14, 14, 13, 10,  6, 12, 10, 12, 12, 10, 11, 11, 11, 11,
   7,
  //#2190~#21FF (112) Arrows
  12,  8, 12,  8, 12,  8, 10, 10, 10, 10, 12, 12, 12, 12, 12,  8,
  12,  8, 12, 12, 12,  8, 12,  8,  8, 12, 12, 12, 12, 14, 14,  8,
   9,  9,  9,  9, 10,  9, 11, 11, 10, 12, 12, 12, 12, 12,  6,  6,
  12, 12,  6,  6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 16, 12,
  12,  9, 12,  9, 14,  9, 11, 11, 11, 11, 12, 12, 14, 14,  8,  8,
  12,  8, 12,  8, 12, 12, 12,  9, 12,  9,  9, 12, 12, 12, 12, 12,
  18, 16, 16, 12, 18, 12, 18, 16, 16, 18, 14, 14, 20, 16, 16, 20,//done
  //#2200~#22FF (256) Mathematical Operators
  11, 10, 10,  8,  8, 13, 12, 12, 10, 10,  8, 10, 10,  8,  8, 14,
  14, 12, 10, 10, 10, 12,  8,  8,  6,  6, 10, 10, 10,  8, 10, 10,
  10, 10,  9,  4,  6,  6,  8, 10, 10, 10, 10,  8, 12, 17,  9, 13,
  17, 10, 10, 10,  8,  8,  4,  6, 10, 10, 10, 10, 10, 10, 10, 10,
   4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 12, 12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 16, 16,  6, 10, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
  10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 11,
  11, 11, 11, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  11, 10, 10,  8,  8, 13, 12, 12, 10, 10,  8, 10, 10,  8,  8, 14,
  10, 10, 10, 10, 10, 10, 12, 12, 12, 10,  8, 10, 10, 10, 10, 10,
  10, 10, 10, 10,  6,  4, 10, 12, 11, 11, 11, 11, 11, 10, 10, 10,
  11, 11, 10, 10, 10, 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 10,
  10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,  4,  8,
   8,  8, 12, 11, 10, 11, 11, 10, 11, 11, 12, 11, 10, 11, 10, 10,
  //#2300~#23FF (256) Miscellaneous Technical
   9, 16, 10,  7,  7,  8,  8,  6,  6,  6,  6,  6,  8,  8,  8,  8,
  10,  8, 12, 12, 10,  9, 10, 12, 12, 10, 10,  8,  7,  7,  7,  7,
   6,  6, 12, 12, 16, 16, 15, 14, 14,  6,  7, 15,  9, 10,  8, 10,
  10,  9, 10, 10, 10, 10, 10,  8, 10, 10, 10, 10, 10,  8, 10,  9,
   9, 10, 10, 10, 10, 11, 10, 10, 10,  8, 10,  8, 10, 10, 10, 10,
  10, 10,  8, 10, 10, 10, 10, 10,  6, 10, 10, 10, 10, 10, 10, 10,
  10, 10,  8,  7,  8,  8, 10, 10, 10,  8,  7,  9,  9, 10,  7, 10,
  10, 10, 10,  7,  9, 10, 10, 10,  7, 10, 10, 13, 12, 18, 16,  6,
  14, 14, 14, 16, 20, 14, 19, 16, 18, 17, 17, 17, 15, 14, 14, 18,
  18, 18, 18, 18, 14, 10,  8, 16, 16, 20, 20,  7,  5,  7,  7,  5,
   7,  7,  4,  7,  7,  4,  7,  6,  7,  6,  4,  7,  6,  7,  4, 18,
   9,  9, 16, 16, 14, 14, 14, 10,  4,  4, 10, 10, 10, 10,  8,  8,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  8,  8, 16, 14, 13,
   4,  9,  9,  9, 16, 16, 15, 12, 12, 12, 12, 16, 18, 18, 18, 17,
  16, 16, 13, 14, 14, 16, 16, 14, 11, 12, 12, 12, 12, 14, 14, 13,
  14, 14, 14, 12,  8,  8, 12, 12,  7, 11, 11, 14, 15,  4, 14, 17,
  //#2440~#245F ( 11) Optical Character Recognition
   8,  8,  8,  8,  8,  8,  9, 10, 10, 10, 10,
  //#2460~#24FF (160) Enclosed Alphanumerics
  14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
  14, 14, 14, 14, 11, 14, 14, 13, 14, 13, 13, 14, 14, 14, 13, 14,
  14, 14, 14, 14, 14, 14, 14, 14,  6,  9,  9,  9,  9,  9,  9,  9,
   9, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 13, 13, 13,
  14, 12, 13, 12, 10, 11, 13, 10, 14, 12, 14, 13, 13, 12, 12, 12,
  12, 14, 14, 14, 14, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
  14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
  14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
  14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 16, 16, 17, 16,
  16, 17, 16, 17, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17,
  //#2500~#257F (128) Box Drawing
  12, 12,  4,  5, 11, 11,  4,  5, 10, 10,  4,  5,  8,  8,  9,  9,
   8,  8,  8,  8,  8,  8,  9,  9,  8,  8,  8,  8,  8,  8,  9,  9,
   9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  8,  8, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  4,  5,
  12,  6,  8,  9,  9,  8,  9,  9,  8,  9,  9,  8,  9,  9,  8,  9,
   9,  8,  9,  9, 12, 12, 12, 12, 12, 12, 12, 12, 12,  8,  8,  8,
   8, 12, 12, 12,  7,  4,  7,  4,  7,  5,  7,  5, 12,  5, 12,  5,
  //#2580~#259F ( 32) Block Elements
  12, 12, 12, 12, 12, 12, 12, 12, 12, 11,  9,  8,  7,  6,  5,  4,
   7,  9, 12, 12, 12,  4,  9,  9,  9, 16, 16, 16, 16,  9, 16, 16,
  //#25A0~#25F0 ( 96) Geometric Shapes
   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  6,  6,  9,  9,  6,  6,
  10, 10,  9,  9,  8,  8,  9,  9,  7,  7, 10, 10,  9,  9,  8,  8,
   9,  9,  7,  7,  9,  9, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9,
   9,  9,  9,  9,  9,  6,  6, 12, 12, 12, 12,  6,  9,  5,  5,  6,
   9,  9,  9,  9,  9,  9,  6,  9,  9,  9,  9,  9,  9,  9,  9, 11,
  12, 12, 12, 12, 14, 14, 14, 14, 13, 12, 13, 12, 12, 10, 10, 14,
  //#2600~#26FF (256) Miscellaneous Symbols
  12, 16, 12, 10, 15, 12, 14,  6,  8, 12, 12, 12,  9, 12, 12, 12,
  12, 12, 12, 10, 12, 12, 16, 16, 14, 16, 16, 16, 14,  8, 15,  8,
  12, 10, 12, 12, 10,  8,  8, 10,  8, 12, 12, 13, 10, 12, 12, 12,
  14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 11, 10, 10,  8,
  10, 10, 12, 10,  9, 10, 12,  8, 14, 12, 12, 14, 12, 16, 14, 17,
  12, 14, 15, 12, 14, 16, 12, 14, 14, 12, 14, 16, 12, 14, 14, 12,
  12, 12, 10, 12, 12, 12, 10, 13, 14,  7, 10, 11, 11,  7,  6,  8,
  14, 14, 16, 18, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 12,
  12, 14, 12, 12, 14, 12, 14, 12, 12, 14, 12, 12, 12, 12, 12, 12,
  14, 14, 14, 14, 12, 13, 12, 12, 12, 14,  8, 16, 14, 16, 13, 13,
  10, 12, 13, 14, 11, 11, 18, 14,  9, 13,  8,  8,  8, 12, 18, 18,
  16, 10,  8,  8,  8,  8, 16,  8,  8, 10, 10, 10, 11, 16, 16, 16,
  14, 14, 14, 14, 12, 16, 16, 16, 16, 12, 12, 16, 10, 16, 16, 16,
  16, 16, 16, 14, 16, 14, 16, 16, 14, 14, 16, 16, 16, 16, 16, 16,
  16, 16, 11, 12, 14, 14, 14, 14, 12, 16, 16, 14, 14, 14, 16, 14,
  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 16, 16, 16, 14,
  //#2700~#27BF (192) Dingbats
  18, 15, 16, 15, 17, 14, 12, 14, 14, 12, 13, 12, 10, 14, 14, 15,
  14, 16, 16, 13, 14, 12, 12, 11, 12, 12, 13, 12, 12,  9, 10, 10,
  10, 12, 13, 13, 13, 13, 13, 14, 16, 14, 13, 14, 14, 14, 14, 14,
  14, 12, 12, 12, 13, 13, 12, 13, 13, 14, 13, 12, 12, 12, 12, 14,
  14, 13, 13, 12, 12, 12, 12, 13, 13, 12, 12, 14, 12, 14, 13, 14,
  14, 13, 13, 12, 12,  8, 13,  6,  4,  6,  8,  6,  6, 12, 12,  8,
  12, 11,  8, 10, 14, 12, 12, 14,  7,  7,  8,  8,  8,  8, 10, 10,
   8,  8,  6,  6,  7,  7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 15, 13, 13, 13, 11, 16, 10, 16, 15, 14, 14, 14,
  14, 14, 15, 15, 14, 16, 16,  8, 15, 14, 14, 14, 14, 12, 12, 15,
  14, 15, 14, 16, 12, 14, 13, 12, 15, 12, 14, 14, 14, 16, 15, 20,
  //#2900~#297F	(128) Supplemental Arrows-B
  18, 18, 16, 16, 17, 18, 16, 16,  8,  8, 12, 12, 17, 17, 18, 18,
  18, 18,  8,  8, 16, 16, 18, 18, 18, 16, 16, 20, 20, 19, 19, 18,
  19, 14, 14, 12, 12, 12, 12, 16, 14, 16, 14, 12, 12, 14, 14, 14,
  14, 16, 16, 18, 14, 14, 12, 12, 10, 10, 20, 20, 20, 20, 12, 12,
  14, 14, 18, 18, 18, 18, 18, 19, 18,  8, 18, 18,  8,  8, 18,  6,
  18,  6, 19, 19, 10, 10, 19, 19, 10, 10, 18, 18, 10, 10, 18, 18,
  10, 10, 18, 10, 18, 10, 18, 18, 18, 18, 18, 18, 18, 18, 10, 10,
  16, 18, 18, 18, 18, 18, 16, 18, 16, 16, 18, 16, 17, 17, 12, 12,
  //#2B00~#2BFF	(252) Miscellaneous Symbols and Arrows
  14, 14, 14, 14, 18, 16, 12, 12, 14, 14, 14, 14, 18, 12, 14, 14,
  14, 14, 12, 12, 12, 12, 14, 14, 14, 14, 12, 16, 16,  8,  8, 14,
  14, 12, 12, 14, 16, 12, 12,  8,  8,  9,  8,  8, 14, 14, 11, 12,
  18, 18, 22, 22, 18, 18, 18, 18, 18, 16, 16, 18, 18, 18, 18, 18,
  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12,  8,  8,
  10,  8,  8, 14, 14, 16, 17, 14, 14, 14, 12, 12, 12, 12, 10, 10,
  14,  8, 14,  8, 14,  8, 10, 10, 10, 10, 14,  8, 13,  8, 13, 13,
  14,  8, 14,  8,         12, 12, 12, 12, 14,  8, 13,  8, 14, 14,
  14, 14, 14, 14, 14, 14, 14, 14, 13, 14, 13, 14, 14, 14, 13, 14,
  14, 14, 14, 13, 16, 16,     10, 12, 14, 12, 14, 12, 14, 12, 14,
  14, 13, 14, 13, 10, 10, 10, 10, 13, 14, 13, 14, 10, 10, 10, 10,
  14, 13, 14, 13, 16, 16, 16, 16, 12, 16, 16, 16, 16, 14, 14, 14,
  10, 14, 14, 14, 14, 12, 12, 10, 10,     14, 14, 13, 10, 14, 10,
  14, 14,  8, 14, 14, 15, 15, 10, 13, 14, 12, 10, 10,  8, 10, 11,
  14, 12, 10, 14, 14, 10, 10, 16,  8,  8, 14, 14, 14,  8, 14,  8,
  11, 10, 13, 12, 15, 16, 12, 12, 12, 16, 18, 22, 10, 12, 12,  9,
  //#3000~#303F ( 64) CJK Symbols and Punctuation
  12,  6,  6,  8, 15, 11, 12, 15,  7,  7,  9,  9,  8,  8,  9,  9,
   7,  7, 12, 12,  7,  7,  7,  7,  6,  6,  6,  6, 16,  8,  8,  8,
  14,  4,  8, 10, 11,  9, 12, 12, 12, 11,  7,  7,  7,  7,  5,  5,
  14,  8, 12, 10, 13,  9, 15, 14, 16, 16, 16,  7, 12, 12, 16, 10,
  //#3040~#309F ( 93) Hiragana
      13, 14, 11, 14, 11, 13, 12, 14, 12, 14, 14, 15, 13, 15, 12,
  14, 13, 15, 13, 14, 13, 14, 12, 13, 14, 14, 14, 16, 14, 15, 14,
  14, 12, 14, 11, 14, 14, 14, 14, 12, 13, 14, 14, 14, 14, 14, 14,
  14, 15, 14, 14, 15, 15, 14, 15, 14, 14, 14, 14, 14, 15, 14, 14,
  14, 14, 14, 12, 14, 12, 14, 12, 14, 13, 12, 13, 14, 13, 12, 14,
  14, 14, 13, 14, 15, 12, 12,          6,  6,  6,  6, 12, 12, 11,
  //#30A0~#30FF ( 96) Katakana
  10, 12, 15, 10, 12, 11, 14, 12, 14, 11, 15, 14, 14, 14, 14, 12,
  14, 14, 14, 14, 14, 14, 15, 14, 14, 14, 15, 14, 14, 12, 12, 13,
  15, 14, 14, 10, 13, 14, 14, 15, 10, 10, 14, 14, 12, 14, 12, 14,
  15, 15, 12, 13, 15, 12, 14, 15, 14, 14, 14, 14, 14, 14, 14, 14,
  14, 12, 14, 10, 14, 12, 15, 10, 13, 14, 12, 14, 13, 14, 10, 14,
  14, 14, 14, 13, 14, 11, 12, 15, 16, 15, 14,  5, 14,  9,  9, 10,
  //#3300~#33FF (256) CJK Compatibility
  16, 16, 16, 16, 15, 16, 15, 16, 16, 16, 16, 15, 16, 16, 15, 16,
  16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 16, 16, 16, 16, 16, 14, 14, 15, 13, 15, 17, 16, 16, 16, 16,
  15, 15, 16, 15, 16, 16, 16, 15, 16, 16, 16, 16, 16, 15, 16, 16,
  16, 16, 16, 16, 15, 13, 16, 16, 16, 14, 16, 15, 16, 16, 16, 16,
  16, 15, 14, 15, 16, 15, 15, 12, 15, 14, 15, 15, 16, 15, 15, 15,
  15, 15, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 15, 16, 15, 15, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  15, 15, 15, 15, 15, 15, 15, 16, 15, 16, 15, 15, 15, 14, 15, 14,
  15, 15, 16, 16, 16, 14, 14, 16, 15, 14, 14, 14, 16, 15, 14, 16,
  16, 14, 15, 16, 16, 14, 15, 16, 16, 15, 16, 16, 16, 16, 16, 16,
  15, 15, 15, 15, 15, 15, 15, 16, 15, 16, 15, 15, 15, 16, 15, 16,
  15, 16, 16, 14, 16, 16, 16, 16, 16, 16, 15, 15, 10, 15, 15, 13,
  13, 10, 15, 11, 15, 12, 16, 14, 16, 16, 15, 12, 16, 16, 16, 16,
  12, 14, 14, 15, 14, 14, 14, 14, 14, 15, 13, 15, 15, 15, 15, 15,
  15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 16,
  //#A000~#A48F (1165) Yi Syllables
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 12, 11,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 11, 11, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  8, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12,  8, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11,
  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12,
  10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 10, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 10,
  10, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 12, 12, 12,
  12, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 10, 10, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12,  8, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12,
  12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 12, 12, 12,
  //#A490~#A4C6 ( 55) Yi Radicals
   4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10,  8, 12, 12, 12,  8,
  12, 12, 12, 12, 12, 12, 12, 12, 12,  8, 12, 12, 12, 12, 12, 10,
  10, 10,  8, 12, 12, 12, 12, 12, 11, 12, 12, 10, 12, 12, 12, 12,
  12, 12, 12, 12, 12, 12,  6,
  //#FE30~#FE4F ( 32) CJK Compatibility Forms
   4,  4,  4,  4,  5, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 16, 16, 16, 16,  8,  8, 16, 16, 13, 14, 18, 18, 13, 14, 18,
  //#FF00~#FFEF (225) Halfwidth and Fullwidth Forms
       4,  6, 10, 10, 14, 11,  4,  6,  6,  8, 10,  4,  6,  4,  6,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  4,  4, 10, 10, 10, 10,
  16, 12, 10, 12, 12, 10, 10, 12, 10,  4,  8, 11,  9, 12, 10, 12,
  10, 12, 11, 10, 10, 10, 12, 16, 12, 12, 10,  6,  6,  6,  8, 10,
   5,  9, 10, 10, 10, 10,  7, 10,  8,  4,  6,  8,  4, 12,  8, 10,
  10, 10,  6,  8,  6,  8, 10, 12,  8, 10,  8,  6,  4,  6, 10,  8,
   8,  5,  8,  8,  6,  4,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
   8,  9,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
   8,  8,  8,  8,  7,  8,  8,  8,  9,  8,  8,  8,  8,  8,  8,  8,
   8,  8,  8,  8,  8,  8,  8,  8,  7,  8,  7,  8,  8,  8,  5,  5,
   1,  8, 10,  9,  8, 10, 10,  8,  9,  8,  8,  9,  9,  9,  8,  8,
   9,  8,  8,  9,  9,  8, 10,  8,  8, 10,  8,  8,  8,  8,  8,
           6,  8,  7,  8,  6,  8,          7,  8,  8,  8,  8,  8,
           8,  8,  8,  9,  8,  8,          8,  8,  4,
  10, 10, 10, 10,  4, 10, 16,      4,  8,  6,  8,  7,  8,  8,
  //#1F300~#1F5FF (768) Miscellaneous Symbols and Pictographs
  10, 16, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18,
  18, 14, 15, 14, 16, 15, 15, 15, 16, 14, 15, 12, 12, 16, 16, 16,
  16,  8, 10, 16, 18, 18, 18, 18, 18, 18, 18, 12, 18, 16, 16, 16,
  16, 15, 10, 10, 14, 16, 14, 14, 16, 14, 16, 13, 16, 16, 15, 15,
  16, 16, 15, 15, 16, 15, 16, 14, 14, 16, 16, 14, 16, 16, 14, 14,
  12, 15, 16, 15, 17, 16, 16, 16, 16, 16, 16, 16, 14, 16, 16, 15,
  16, 14, 14, 18, 12, 16, 10, 16, 14, 17, 16, 16, 16, 12, 16, 12,
  16, 16, 16, 16,  9, 16, 14, 12, 13, 13, 14, 16,  8, 16, 14, 11,
  18, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16, 17, 16, 14, 17, 17,
  10, 16, 14, 16, 16, 16,  9, 10, 16,  8, 10, 10, 13, 13, 14, 16,
  16, 15, 14, 16, 16, 12, 14, 16, 16, 16, 16, 17, 16, 18, 17, 16,
  17, 16, 13, 16, 12, 13, 16, 16, 16, 16, 16, 16, 16, 12, 16, 16,
  12, 16, 12, 16, 12,  8, 15, 17, 16, 15, 16, 14, 10, 14, 19, 16,
  14, 14, 14, 13, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
  16, 16, 13, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16,
  14, 16, 16, 12, 12, 14, 14, 16, 14, 12, 12, 16, 16, 16, 16, 16,
  19, 14, 18, 18, 17, 18, 20, 16, 14, 16, 18, 16, 16, 16, 18, 16,
  13, 14, 16, 14, 10, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 16, 16, 16, 14, 14, 16, 12, 14, 15, 16, 18, 16, 16, 19, 12,
  16, 17, 16, 16, 16, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  14, 16, 10, 14, 14, 14, 10, 10, 16, 16, 15, 14, 13, 10, 10, 17,
  16, 16, 16, 16, 14, 16, 10, 12, 16, 10, 14, 16, 16, 16, 16, 16,
  16, 16, 12, 12, 14, 14, 17, 17, 16, 18, 16, 11, 12, 12, 16, 16,
  17, 18, 17, 17, 18, 17, 16, 18, 18, 16, 16, 16, 16, 15, 16, 14,
  14, 16, 14, 10, 14, 16, 16, 16, 10, 16, 16, 17, 16, 14, 17, 20,
  14, 20, 16, 16, 17, 16, 16, 16, 16, 16, 16, 16, 16, 17, 16, 16,
  16, 17, 16, 16, 16, 16, 16,  7, 16, 14, 18, 18, 16, 16, 16, 16,
  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 18, 16, 16, 16, 16,
  16, 12, 14, 14, 12, 16, 16, 16, 16, 16, 16, 12, 16, 15, 16, 16,
  16, 16, 14, 12, 13, 14, 16, 18, 18, 18, 16, 16, 16, 16, 16, 17,
  16, 14, 16, 16, 16, 16, 16, 16, 16, 14, 12, 14, 16, 14, 16, 16,
  14,  9, 16, 16, 16, 14, 15, 16, 18, 17, 14, 16, 18, 16, 16, 10,
  15, 14, 14, 16, 16, 11, 10, 16,  8, 11, 14, 16, 14, 16, 16, 16,
  16, 15, 14, 16, 14, 14,  8, 16, 16, 16, 16, 14, 16, 14, 16, 16,
  16, 16, 16, 16, 16, 16, 16, 16, 15, 17, 16, 17, 10, 14, 13, 15,
  12, 16, 16, 16, 16, 16, 15, 15, 12, 12, 14, 14, 10, 10, 14, 14,
  14, 14, 14, 14, 14, 16, 12, 10, 10, 14, 16, 18, 12, 12, 14, 16,
  14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
  14, 14, 14, 14, 14, 14, 14, 14,  8, 11, 14, 13, 17, 14, 18,  7,
  16, 10, 14, 14,  6, 14, 12, 12, 18, 12, 12,  6, 10,  7, 16, 16,
  12, 10, 16, 16, 16, 18, 15, 10, 14, 16, 16, 16, 16, 16, 16, 12,
  14, 14, 10, 10, 10,  8, 14,  8, 14, 14, 14, 14, 14, 14,  8,  8,
   8,  8,  9,  8, 16, 10, 18, 14, 14,  8, 14, 14, 14, 16, 16, 17,
  15, 17, 17, 16, 14, 16, 14, 14, 14, 12, 12, 12, 12, 14, 14, 14,
  16, 20, 18, 18,  8, 10, 10, 14, 10, 10, 14, 10, 10, 14, 10, 10,
  14, 10, 14, 14, 16, 10, 14, 14, 12, 12, 14, 14, 13, 14, 16, 16,
  12, 10, 14, 14, 10, 10,  7,  7, 16, 16, 18, 16, 16, 16, 17, 17,
  18, 18, 14, 16, 10, 14, 10, 14, 12, 15, 22, 18, 11, 16, 18, 14,
  //#1F600~#1F64F ( 80) Emoticons
  16, 16, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 16, 16, 16, 14, 16, 16, 16, 16, 16, 16, 16, 14, 18, 16, 16,
  16, 18, 16, 16, 22, 16, 16, 16, 18, 18, 18, 17, 17, 17, 17, 17,
  17, 14, 14, 14, 15, 14, 16, 14, 16, 14, 14, 14, 14, 14, 14, 14,
};

std::string util_exfont_part_string[1024];
std::string util_exfont_font_samples[10241];
std::string util_exfont_font_right_to_left_samples[257];
std::string util_exfont_font_name[DEF_EXFONT_NUM_OF_FONT_NAME];
std::string util_exfont_ignore_chars = "\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u200B\u200C\u200D\u200E\u200F";
C2D_Image util_exfont_font_images[10240];

int util_exfont_font_characters[DEF_EXFONT_NUM_OF_FONT_NAME] = {
 128,  96, 128, 208,  96,  80, 112, 135, 256,  48,  89,  88,  255, 128, 79,  72, 
  96,  88,  90,  87,  67, 211,  88, 640, 128,  63, 233,  71,  42,  33, 112, 256,
 256,  11, 160, 128,  32,  96, 256, 192, 128, 252,  64,  93,  96, 256, 1165, 55, 
  32, 225, 768,  80,
};
int util_exfont_num_of_right_left_charcters = 0;
int util_exfont_font_start_num[DEF_EXFONT_NUM_OF_FONT_NAME];
Thread util_exfont_load_font_thread;

Result_with_string Exfont_load_exfont(int exfont_num);
void Exfont_unload_exfont(int exfont_num);

void Exfont_load_font_thread(void* arg)
{
    Util_log_save(DEF_EXFONT_LOAD_FONT_THREAD_STR, "Thread started.");
    Result_with_string result;

    while(util_exfont_thread_run)
    {
        if(util_exfont_load_external_font_request)
        {
            for(int i = 0; i < DEF_EXFONT_NUM_OF_FONT_NAME; i++)
            {
                if(util_exfont_request_external_font_state[i] && !util_exfont_loaded_external_font[i])
                {
                    result = Exfont_load_exfont(i);
					Util_log_save(DEF_EXFONT_LOAD_FONT_THREAD_STR, "Exfont_load_exfont()..." + result.string + result.error_description, result.code);
                    var_need_reflesh = true;
                }
            }
            util_exfont_load_external_font_request = false;
        }
        else if(util_exfont_unload_external_font_request)
        {
            for(int i = 0; i < DEF_EXFONT_NUM_OF_FONT_NAME; i++)
            {
                if(!util_exfont_request_external_font_state[i] && util_exfont_loaded_external_font[i])
                {
					Exfont_unload_exfont(i);
                    var_need_reflesh = true;
                }
            }
            util_exfont_unload_external_font_request = false;
        }
        else if(util_exfont_load_system_font_request)
        {
            for(int i = 0; i < 4; i++)
            {
                if(util_exfont_request_system_font_state[i] && !util_exfont_loaded_system_font[i])
                {
					result = Draw_load_system_font(i);
					Util_log_save(DEF_EXFONT_LOAD_FONT_THREAD_STR, "Draw_load_system_font()..." + result.string + result.error_description, result.code);
                    var_need_reflesh = true;
                    if(result.code == 0 || i == var_system_region)
                        util_exfont_loaded_system_font[i] = true;
                }
            }
            util_exfont_load_system_font_request = false;
        }
        else if(util_exfont_unload_system_font_request)
        {
            for(int i = 0; i < 4; i++)
            {
                if(!util_exfont_request_system_font_state[i] && util_exfont_loaded_system_font[i])
                {
					Draw_free_system_font(i);
                    var_need_reflesh = true;
                    util_exfont_loaded_system_font[i] = false;
                }
            }
            util_exfont_unload_system_font_request = false;
        }
        else
            usleep(DEF_ACTIVE_THREAD_SLEEP_TIME);
    }
	Util_log_save(DEF_EXFONT_LOAD_FONT_THREAD_STR, "Thread exit.");
}

Result_with_string Exfont_init(void)
{
    int characters = 0;
    u8* fs_buffer = NULL;
    u32 read_size = 0;
    Result_with_string result;

    if(util_exfont_init)
        goto already_inited;

    result = Util_file_load_from_rom("font_name.txt", "romfs:/gfx/msg/", &fs_buffer, 0x2000, &read_size);
    if(result.code != 0)
        goto api_failed;

    result = Util_parse_file((char*)fs_buffer, DEF_EXFONT_NUM_OF_FONT_NAME, util_exfont_font_name);
    if(result.code != 0)
        goto api_failed;

    free(fs_buffer);
    fs_buffer = NULL;

    result = Util_file_load_from_rom("font_samples.txt", "romfs:/gfx/font/sample/", &fs_buffer, 0x8000, &read_size);
    if(result.code != 0)
        goto api_failed;

    Exfont_text_parse((char*)fs_buffer, util_exfont_font_samples, 10240, &characters);
    free(fs_buffer);
    fs_buffer = NULL;

    for (int i = characters; i > -1; i--)
        util_exfont_font_samples[i + 1] = util_exfont_font_samples[i];

    result = Util_file_load_from_rom("font_right_to_left_samples.txt", "romfs:/gfx/font/sample/", &fs_buffer, 0x8000, &read_size);
    if(result.code != 0)
        goto api_failed;

    Exfont_text_parse((char*)fs_buffer, util_exfont_font_right_to_left_samples, 256, &characters);
    free(fs_buffer);
    fs_buffer = NULL;

    util_exfont_num_of_right_left_charcters = characters;

    util_exfont_font_samples[0] = "\u0000";
    util_exfont_font_start_num[0] = 0;
    for (int i = 1; i < DEF_EXFONT_NUM_OF_FONT_NAME; i++)
        util_exfont_font_start_num[i] = util_exfont_font_start_num[i - 1] + util_exfont_font_characters[i - 1];
    
    for (int i = 0; i < DEF_EXFONT_NUM_OF_FONT_NAME; i++)
    {
        util_exfont_loaded_external_font[i] = false;
        util_exfont_request_external_font_state[i] = false;
        util_exfont_texture_num[i] = 0;
    }

	util_exfont_thread_run = true;
	util_exfont_load_font_thread = threadCreate(Exfont_load_font_thread, (void*)(""), DEF_STACKSIZE, DEF_THREAD_PRIORITY_NORMAL, 0, false);
    if(!util_exfont_load_font_thread)
    {
        result.error_description = "[Error] threadCreate() failed. ";
        goto nintendo_api_failed;
    }

    util_exfont_init = true;
    return result;
    
    already_inited:
	result.code = DEF_ERR_ALREADY_INITIALIZED;
	result.string = DEF_ERR_ALREADY_INITIALIZED_STR;
	return result;

    api_failed:
    free(fs_buffer);
    fs_buffer = NULL;
	return result;

	nintendo_api_failed:
	result.string = DEF_ERR_NINTENDO_RETURNED_NOT_SUCCESS_STR;
	return result;
}

void Exfont_exit(void)
{
    if(!util_exfont_init)
        return;
    
    util_exfont_init = false;
    util_exfont_thread_run = false;
	threadJoin(util_exfont_load_font_thread, 10000000000);
	threadFree(util_exfont_load_font_thread);
}

std::string Exfont_query_external_font_name(int exfont_num)
{
    if(!util_exfont_init)
        return "";
    else if (exfont_num >= 0 && exfont_num < DEF_EXFONT_NUM_OF_FONT_NAME)
        return util_exfont_font_name[exfont_num];
    else
        return "";
}

bool Exfont_is_loaded_external_font(int exfont_num)
{
    if(!util_exfont_init)
        return false;
    else if (exfont_num >= 0 && exfont_num < DEF_EXFONT_NUM_OF_FONT_NAME)
        return util_exfont_loaded_external_font[exfont_num];
    else
        return false;
}

bool Exfont_is_loading_external_font(void)
{
    if(!util_exfont_init)
        return false;
    
    return util_exfont_load_external_font_request;
}

bool Exfont_is_unloading_external_font(void)
{
    if(!util_exfont_init)
        return false;
    
    return util_exfont_unload_external_font_request;
}

bool Exfont_is_loaded_system_font(int system_font_num)
{
    if(!util_exfont_init)
        return false;
    else if (system_font_num >= 0 && system_font_num < 4)
        return util_exfont_loaded_system_font[system_font_num];
    else
        return false;
}

bool Exfont_is_loading_system_font(void)
{
    if(!util_exfont_init)
        return false;

    return util_exfont_load_system_font_request;
}

bool Exfont_is_unloading_system_font(void)
{
    if(!util_exfont_init)
        return false;

    return util_exfont_unload_system_font_request;
}

void Exfont_set_external_font_request_state(int exfont_num, bool flag)
{
    if(!util_exfont_init)
        return;

    if (exfont_num >= 0 && exfont_num < DEF_EXFONT_NUM_OF_FONT_NAME)
        util_exfont_request_external_font_state[exfont_num] = flag;
}

void Exfont_request_load_external_font(void)
{
    if(!util_exfont_init)
        return;

    util_exfont_load_external_font_request = true;
}

void Exfont_request_unload_external_font(void)
{
    if(!util_exfont_init)
        return;

    util_exfont_unload_external_font_request = true;
}

void Exfont_set_system_font_request_state(int system_font_num, bool flag)
{
    if(!util_exfont_init)
        return;

    if (system_font_num >= 0 && system_font_num < 4)
        util_exfont_request_system_font_state[system_font_num] = flag;
}

void Exfont_request_load_system_font(void)
{
    if(!util_exfont_init)
        return;

    util_exfont_load_system_font_request = true;
}

void Exfont_request_unload_system_font(void)
{
    if(!util_exfont_init)
        return;

    util_exfont_unload_system_font_request = true;
}

std::string Exfont_text_sort(std::string sorce_part_string[], int max_loop)
{
    int right_to_left_pos = -1;
    bool found = false;
    std::string result_string = "";
    std::string right_to_left_sample[2] = { "\u05BD", "\u0700", };

    if(!util_exfont_init)
        return "";
    
    if(!sorce_part_string || max_loop <= 0)
        return "";
    
    for (int i = 0; i < max_loop; i++)
    {
        found = false;
        if (memcmp((void*)sorce_part_string[i].c_str(), (void*)util_exfont_font_samples[0].c_str(), 0x1) == 0)
            break;

        if (util_exfont_font_right_to_left_samples[201] == sorce_part_string[i])
            found = true;
        else if (sorce_part_string[i].length() == 2 && memcmp((void*)sorce_part_string[i].c_str(), (void*)right_to_left_sample[0].c_str(), 0x2) > 0
            && memcmp((void*)sorce_part_string[i].c_str(), (void*)right_to_left_sample[1].c_str(), 0x2) < 0)
        {
            for (int j = 0; j < util_exfont_num_of_right_left_charcters - 1; j++)
            {
                if (memcmp((void*)sorce_part_string[i].c_str(), (void*)util_exfont_font_right_to_left_samples[j].c_str(), 0x2) == 0)
                {
                    found = true;
                    break;
                }
            }
        }

        if (found)
        {
            if (right_to_left_pos <= -1)
                right_to_left_pos = result_string.length();

            result_string.insert(right_to_left_pos, sorce_part_string[i]);
        }
        else
        {
            result_string += sorce_part_string[i];
            right_to_left_pos = -1;
        }
    }
    return result_string;
}

void Exfont_text_parse(std::string sorce_string, std::string part_string[], int max_loop, int* out_element)
{
    int sorce_string_length = 0;
    int std_num = 0;
    int parse_string_length = 0;
    int i = 0;
    char* sorce_string_char = NULL;
    
    if(!part_string || max_loop <= 0 || !out_element)
        return;
    
    *out_element = 0;
    sorce_string_length = sorce_string.length();
    sorce_string_char = (char*)malloc(sorce_string.length() + 10);
    if(!sorce_string_char)
        return;

    memset(sorce_string_char, 0x0, sorce_string.length() + 10);
    strcpy(sorce_string_char, (char*)sorce_string.c_str());

    for (int k = 0; k < max_loop; k++)
    {
        parse_string_length = mblen(&sorce_string_char[i], 4);

        if (i >= sorce_string_length)
            break;
        else if (parse_string_length >= 1)
        {
            part_string[std_num] = sorce_string.substr(i, parse_string_length);
            i += parse_string_length;
            std_num++;
        }
        else
            i++;
    }
    part_string[std_num] = "\u0000";
    free(sorce_string_char);
    sorce_string_char = NULL;
    *out_element = std_num;
}

void Exfont_draw_external_fonts(std::string in_string, float texture_x, float texture_y, float texture_size_x, float texture_size_y, int abgr8888, float* out_width, float* out_height, bool size_only)
{
    double interval_offset = 0.5;
    double x_offset = 0.0;
    double x_size = 0.0;
    int block = -1;
    int char_size = 0;
    int characters = 0;
    int memcmp_result = 0;
    bool reverse = false;
    bool unknown = true;
    std::string sample_one_byte[DEF_EXFONT_NUM_OF_ONE_BYTE_FONT] = { "\u0080", };
    std::string samples_two_bytes[DEF_EXFONT_NUM_OF_TWO_BYTES_FONT] = { "\u0100", "\u0180", "\u0250", "\u02B0", "\u0300", "\u0370", "\u0400", "\u0500", "\u0530", "\u0590", "\u0600", "\u0700", };
    std::string samples_three_bytes[DEF_EXFONT_NUM_OF_THREE_BYTES_FONT] = { "\u0980", "\u0A80", "\u0C00", "\u0C80", "\u0D00", "\u0E00", "\u0E80", "\u0F00",
                                            "\u1000", "\u1100", "\u1680", "\u1D80", "\u1E00", "\u2000", "\u2070", "\u20A0",
                                            "\u2100", "\u2200", "\u2300", "\u2400", "\u2460", "\u2500", "\u2580", "\u25A0",
                                            "\u2600", "\u2700", "\u27C0", "\u2980", "\u2C00", "\u3040", "\u30A0", "\u3100",
                                            "\u3400", "\uA490", "\uA4D0", "\uFE50", "\uFFF0", };
    std::string samples_four_bytes[DEF_EXFONT_NUM_OF_FOUR_BYTES_FONT] = { "\U0001F600", "\U0001F650", };

    if(!util_exfont_init)
        return;

    if(!out_width || !out_height)
        return;

    *out_width = 0;
    *out_height = 0;
    Exfont_text_parse(in_string, util_exfont_part_string, 1023, &characters);

    for (int s = 0; s < characters; s++)
    {
        block = -1;
        unknown = true;
        if (memcmp((void*)util_exfont_part_string[s].c_str(), (void*)util_exfont_font_samples[0].c_str(), 0x1) == 0)
            break;

        if (util_exfont_part_string[s].length() == 1)
        {
            char_size = 1;
            if (memcmp((void*)util_exfont_part_string[s].c_str(), (void*)sample_one_byte[0].c_str(), 0x1) < 0)
                block = 0;
        }
        else if (util_exfont_part_string[s].length() == 2)
        {
            char_size = 2;
            for (int i = 0; i < DEF_EXFONT_NUM_OF_TWO_BYTES_FONT; i++)
            {
                if (memcmp((void*)util_exfont_part_string[s].c_str(), (void*)samples_two_bytes[i].c_str(), 0x2) < 0)
                {
                    block = i + DEF_EXFONT_NUM_OF_ONE_BYTE_FONT;
                    break;
                }
            }
        }
        else if (util_exfont_part_string[s].length() == 3)
        {
            char_size = 3;
            for (int i = 0; i < DEF_EXFONT_NUM_OF_THREE_BYTES_FONT; i++)
            {
                if (memcmp((void*)util_exfont_part_string[s].c_str(), (void*)samples_three_bytes[i].c_str(), 0x3) < 0)
                {
                    block = i + DEF_EXFONT_NUM_OF_ONE_BYTE_FONT + DEF_EXFONT_NUM_OF_TWO_BYTES_FONT;
                    break;
                }
            }
        }
        else if (util_exfont_part_string[s].length() == 4)
        {
            char_size = 4;
            for (int i = 0; i < DEF_EXFONT_NUM_OF_FOUR_BYTES_FONT; i++)
            {
                if (memcmp((void*)util_exfont_part_string[s].c_str(), (void*)samples_four_bytes[i].c_str(), 0x4) < 0)
                {
                    block = i + DEF_EXFONT_NUM_OF_ONE_BYTE_FONT + DEF_EXFONT_NUM_OF_TWO_BYTES_FONT + DEF_EXFONT_NUM_OF_THREE_BYTES_FONT;
                    break;
                }
            }
        }

        if (block == 27)//General punctuation
        {
            if (!(util_exfont_ignore_chars.find(util_exfont_part_string[s]) == std::string::npos))
            {
                unknown = false;
                block = -1;
            }
        }

        if (block != -1 && util_exfont_loaded_external_font[block] && char_size >= 1 && char_size <= 4)
        {
            reverse = false;
            for (int k = 0;;)
            {
                if (!reverse)
                    k += 20;
                else
                    k--;

                if ((k < 0 || k > util_exfont_font_characters[block]) && reverse)
                    break;
                else
                    memcmp_result = memcmp((void*)util_exfont_part_string[s].c_str(), (void*)util_exfont_font_samples[util_exfont_font_start_num[block] + k].c_str(), char_size);

                if (memcmp_result == 0)
                {
                    unknown = false;
                    x_size = (util_exfont_font_interval[util_exfont_font_start_num[block] + k] + interval_offset) * texture_size_x;
                    if(!size_only)
                        Draw_texture(util_exfont_font_images[util_exfont_font_start_num[block] + k], abgr8888, (texture_x + x_offset), texture_y, x_size, 20.0 * texture_size_y);

                    x_offset += x_size;
                    break;
                }
                else if (memcmp_result < 0 || k >= util_exfont_font_characters[block])
                {
                    reverse = true;
                    if (k >= util_exfont_font_characters[block])
                        k = util_exfont_font_characters[block];
                }
            }
        }

        if (unknown)
        {
            x_size = (util_exfont_font_interval[0] + interval_offset) * texture_size_x;
            if(!size_only)
                Draw_texture(util_exfont_font_images[0], abgr8888, (texture_x + x_offset), texture_y, x_size, 20.0 * texture_size_y);

            x_offset += x_size;
        }
    }
    *out_width = x_offset;
    *out_height = 20.0 * texture_size_y;
}

void Exfont_draw_external_fonts(std::string in_string, float texture_x, float texture_y, float texture_size_x,
 float texture_size_y, int abgr8888, float* out_width, float* out_height)
{
    Exfont_draw_external_fonts(in_string, texture_x, texture_y, texture_size_x, texture_size_y, abgr8888, out_width, out_height, false);    
}

void Exfont_draw_get_text_size(std::string in_string, float texture_size_x, float texture_size_y, float* out_width, float* out_height)
{
    Exfont_draw_external_fonts(in_string, 0, 0, texture_size_x, texture_size_y, DEF_DRAW_NO_COLOR, out_width, out_height, true);
}

Result_with_string Exfont_load_exfont(int exfont_num)
{
    Result_with_string result;
    if (exfont_num >= 0 && exfont_num < DEF_EXFONT_NUM_OF_FONT_NAME)
    {
        util_exfont_texture_num[exfont_num] = Draw_get_free_sheet_num();
        result = Draw_load_texture("romfs:/gfx/font/" + util_exfont_font_name[exfont_num] + "_font.t3x", util_exfont_texture_num[exfont_num], util_exfont_font_images, util_exfont_font_start_num[exfont_num], util_exfont_font_characters[exfont_num]);

        if (result.code == 0)
        {
            for (int i = 0; i < util_exfont_font_characters[exfont_num]; i++)
            {
                C3D_TexSetFilter(util_exfont_font_images[util_exfont_font_start_num[exfont_num] + i].tex, GPU_LINEAR, GPU_LINEAR);
                C3D_TexSetWrap(util_exfont_font_images[util_exfont_font_start_num[exfont_num] + i].tex, GPU_CLAMP_TO_EDGE, GPU_CLAMP_TO_EDGE);
            }
            util_exfont_loaded_external_font[exfont_num] = true;
        }

        if (result.code != 0)
        {
            Exfont_unload_exfont(exfont_num);
            util_exfont_loaded_external_font[exfont_num] = false;
        }
    }
    else
        goto invalid_arg;

    return result;

    invalid_arg:
    result.code = DEF_ERR_INVALID_ARG;
    result.string = DEF_ERR_INVALID_ARG_STR;
    return result;
}

void Exfont_unload_exfont(int exfont_num)
{
    if (exfont_num >= 0 && exfont_num < DEF_EXFONT_NUM_OF_FONT_NAME)
    {
        Draw_free_texture(util_exfont_texture_num[exfont_num]);
        for (int j = util_exfont_font_start_num[exfont_num]; j < util_exfont_font_characters[exfont_num]; j++)
            util_exfont_font_images[j].tex = NULL;

        util_exfont_loaded_external_font[exfont_num] = false;
    }
}
